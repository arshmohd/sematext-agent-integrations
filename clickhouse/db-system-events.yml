type: db
data:
  query: SELECT * FROM events;
  dbUrl: jdbc:clickhouse://${SPM_MONITOR_CLICKHOUSE_DB_HOST_PORT}/system
  dbDriverClass: ru.yandex.clickhouse.ClickHouseDriver
  dbUser: ${SPM_MONITOR_CLICKHOUSE_DB_USER}
  dbPassword: ${SPM_MONITOR_CLICKHOUSE_DB_PASSWORD}
  #  dbVerticalModel="true" - because output of `SELECT * FROM events;` query gives each attribute in its own row
  # (1st column being attribute name, 2nd column being attribute value)
  dbVerticalModel: true

observation:
  # ProfileEvents counts number of happened events - for example, how many times queries was executed
  - name: events
    metricNamespace: clickhouse

    metric:
      - name: query.count
        source: Query
        type: counter
        label: Total query count
        description: Total number of queries started to be interpreted and may be executed.
      - name: query.select.count
        source: SelectQuery
        type: counter
        label: Select query count
        description: Number of SELECT queries started to be interpreted and may be executed.
      - name: query.insert.count
        source: InsertQuery
        type: counter
        label: Insert query count
        description: Number of INSERT queries started to be interpreted and may be executed.
      - name: file.open.failed
        source: FileOpenFailed
        type: counter
        label: Failed file opens
      - name: buffer.read.fd.failed
        source: ReadBufferFromFileDescriptorReadFailed
        type: counter
        label: Read buffer failed file reads
        description: Number of times the read (read/pread) from a file descriptor has failed.
      - name: buffer.write.fd.failed
        source: WriteBufferFromFileDescriptorWriteFailed
        type: counter
        label: Write buffer failed file writes
        description: Number of times the write (write/pwrite) to a file descriptor has failed.
      - name: insert.rows
        source: InsertedRows
        type: counter
        label: Inserted rows
        description: Number of rows inserted to all tables.
      - name: insert.bytes
        source: InsertedBytes
        type: counter
        label: Inserted bytes
        unit: bytes
        description: Number of uncompressed bytes inserted to all tables.
      - name: merge.rows
        source: MergedRows
        type: counter
        label: Merged rows
        description: Rows read for background merges. This is the number of rows before merge.
      - name: cache.mark.hits
        source: MarkCacheHits
        type: counter
        label: Mark cache hits
        description: "Mark cache - Cache of 'marks' for merge tree storage engine. Marks is an index structure that addresses ranges in column file, corresponding to ranges of primary key"
      - name: cache.mark.misses
        source: MarkCacheMisses
        type: counter
        label: Mark cache misses
        description: "Mark cache - Cache of 'marks' for merge tree storage engine. Marks is an index structure that addresses ranges in column file, corresponding to ranges of primary key"
      - name: repl.part.fetches
        source: ReplicatedPartFetches
        type: counter
        label: Replicated part fetches
        description: Number of times a data part was downloaded from the replica of a ReplicatedMergeTree table.
      - name: repl.part.fetches.failed
        source: ReplicatedPartFailedFetches
        type: counter
        label: Failed replicated part fetches
      - name: repl.part.obsolete
        source: ObsoleteReplicatedParts
        type: counter
        label: Obsolete replicated parts
        description: Replicated parts that are replaced/rendered obsolete by fetching new parts.
      - name: repl.part.merge.count
        source: ReplicatedPartMerges
        type: counter
        label: Replicated part merges
      - name: repl.part.fetches.merged
        source: ReplicatedPartFetchesOfMerged
        type: counter
        label: Fetches of merged replicated parts
        description: Number of times the system prefers to download already merged part from the replica of ReplicatedMergeTree table.
      - name: repl.part.checks
        source: ReplicatedPartChecks
        type: counter
        label: Replicated part checks
      - name: repl.part.checks.failed
        source: ReplicatedPartChecksFailed
        type: counter
        label: Failed replicated part checks
      - name: repl.part.lost
        source: ReplicatedDataLoss
        type: counter
        label: Lost replicated parts
        description: Replicated parts lost forever (possible if on all the replicas where the part was, is deteriorated), detected during part checks.
      - name: connection.dist.retries
        source: DistributedConnectionFailTry
        type: counter
        label: Distributed Connection Retries
        description: Count of connection retries in replicated DB connection pool
      - name: connection.dist.fails
        source: DistributedConnectionFailAtAll
        type: counter
        label: Distributed Connection Fails
        description: Count of connection failures after all retries in replicated DB connection pool
      - name: merge.bytes.uncompressed
        source: MergedUncompressedBytes
        type: counter
        label: Uncompressed bytes merged
        unit: bytes
        description: Uncompressed bytes that was read for background merges. This is the number before merge.
      - name: merge.time
        source: MergesTimeMilliseconds
        type: counter
        label: Merge time
        unit: ms
        description: Total time spent for background merges.
      - name: lock.rw.acquired.reads
        source: RWLockAcquiredReadLocks
        type: counter
        label: RW Lock acquired read locks
        description: Count of acquired read locks on table storage. RW locks are used to control concurrent access to table structure and data
      - name: lock.rw.reader.wait.time
        source: RWLockReadersWaitMilliseconds
        type: counter
        label: RW Lock reader wait time
        unit: ms
        description: Total time waited to get read locks on table storage. RW locks are used to control concurrent access to table structure and data
      - name: lock.rw.acquired.writes
        source: RWLockAcquiredWriteLocks
        type: counter
        label: RW Lock acquired write locks
        description: Count of acquired write locks on table. RW locks are used to control concurrent access to table structure
      - name: lock.rw.writer.wait.time
        source: RWLockWritersWaitMilliseconds
        type: counter
        label: RW Lock write wait time
        unit: ms
        description: Total time waited to get write locks on table storage. RW locks are used to control concurrent access to table structure
      - name: insert.delayed
        source: DelayedInserts
        type: counter
        label: Delayed inserts
        description: Part inserts that are delayed because the current `Max active part count` is more than `parts_to_delay_insert` setting
      - name: insert.rejected
        source: RejectedInserts
        type: counter
        label: Rejected inserts
        description: Part inserts that are rejected because the current `Max active part count` is more than `parts_to_throw_insert` setting
      - name: zk.wait.time
        source: ZooKeeperWaitMicroseconds
        type: counter
        label: Zookeeper wait time
        unit: microseconds
        description: Time spent in waiting for Zookeeper operations
      - name: zk.exceptions
        source: ZooKeeperExceptions
        type: counter
        label: Zookeeper exceptions
        description: Count of exceptions during Zookeeper operations
      - name: zk.nodes.ephemeral.remove.fails
        source: CannotRemoveEphemeralNode
        type: counter
        label: Zookeeper ephemeral node removal failures
        description: Count of Zookeeper ephemeral node removal failures
      - name: network.errors
        source: NetworkErrors
        type: counter
        label: Network errors
        description: Count of network errors (timeouts and connection failures) during query execution, background pool tasks and DNS cache update
      - name: distributed.sync.insert.timeout
        source: DistributedSyncInsertionTimeoutExceeded
        type: counter
        label: Distributed Sync insertion timeouts
        description: Count of sync distributed insert wait timeout exceeded errors in distributed storage engine
      - name: dict.cache.keys.expired
        source: DictCacheKeysExpired
        type: counter
        label: Cache dictionary expired keys
      - name: dict.cache.keys.notfound
        source: DictCacheKeysNotFound
        type: counter
        label: Cache dictionary keys not found
      - name: dict.cache.keys.hits
        source: DictCacheKeysHit
        type: counter
        label: Cache dictionary keys hits


